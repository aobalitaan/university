print("Out of range")
return (NA);
}
eqtns = createEquation(data, rData - 1)
eqtns = eqtns[-1,-1]
sol = GaussJordanMethod(list(augcoeffmatrix = eqtns, variables = ncol(eqtns[,-ncol(eqtns)]))) $ solution
sol = matrix(sol, nrow = 1)
sol = cbind(0, sol)
colnames(sol) = c("A1", colnames(eqtns[,-ncol(eqtns)]))
print(sol)
fx = createFunctions(sol)
yEval = evaluateX(data, fx, xEval)
print(yEval)
}
createEquation <- function(data, n)
{
eqtns = matrix(0, nrow = (3 * n), ncol = (3 * n) + 1)
var <- paste0(rep(c("A", "B", "C"), n), rep(1:n, each = 3))
colnames(eqtns) <- c(var, "RHS")
mat_ptr = 2
col_ptr = 1
for (i in 2:n)
{
b = data[i,1]
a = b ^ 2
y = data[i,2]
eqtns[mat_ptr, col_ptr:(col_ptr + 2)] = c(a, b, 1)
eqtns[mat_ptr, (3 * n) + 1] = y
col_ptr = col_ptr + 3
eqtns[mat_ptr + 1, col_ptr:(col_ptr + 2)] = c(a, b, 1)
eqtns[mat_ptr + 1, (3 * n) + 1] = y
mat_ptr = mat_ptr + 2
}
b = data[c(1, n + 1), 1]
y = y = data[c(1, n + 1), 2]
a = b ^ 2
eqtns[mat_ptr, 1:3] = c(a[1], b[1], 1)
eqtns[mat_ptr, (3 * n) + 1] = y[1]
eqtns[mat_ptr + 1, (3 * n - 2):(3 * n)] = c(a[2], b[2], 1)
eqtns[mat_ptr + 1, (3 * n) + 1] = y[2]
mat_ptr = mat_ptr + 2
col_ptr = 1
for (i in 2:n)
{
a = 2 * data[i,1]
eqtns[mat_ptr, col_ptr:(col_ptr + 4)] = c(a, 1, 0, -a, -1)
col_ptr = col_ptr + 3
mat_ptr = mat_ptr + 1
}
return (eqtns)
}
createFunctions <- function(sol) {
fx = c()
for (i in seq(from = 1, to = ncol(sol), by = 3))
{
subSol = sol[1,i:(i+2)]
intervFx = paste("function (x) ", paste0("( ", subSol, " * (x ^ ", 2:0, ") )", collapse = " + "))
intervFx = eval(parse(text = intervFx))
fx = c(fx, intervFx)
}
return(fx)
}
evaluateX <- function(data, fx, xEval)
{
for (i in 1:nrow(data))
{
if (xEval <= data[i,1])
{
return(fx[[i - 1]](xEval))
}
}
}
quadraticSpline(data, xEval)
x = c(0, 1, 2.5, 3, 4, 5, 6, 7, 8, 8.75, 9, 10, 11, 11.25, 11.5)
y = c(1, 2, 9, 9.2, 10, 12, 14.5, 17, 20, 23, 23.5, 24, 25.5, 25.9, 25.9)
source("gaussMethods.R")
data = matrix(c(x, y), ncol = 2, nrow = length(x), byrow = FALSE)
xEval = 0.5
quadraticSpline <- function(data, xEval)
{
rData = nrow(data)
cData = ncol(data)
if ((xEval > data[rData, 1]) || (xEval < data[1, 1]))
{
print("Out of range")
return (NA);
}
eqtns = createEquation(data, rData - 1)
eqtns = eqtns[-1,-1]
sol = GaussJordanMethod(list(augcoeffmatrix = eqtns, variables = ncol(eqtns[,-ncol(eqtns)]))) $ solution
sol = matrix(sol, nrow = 1)
sol = cbind(0, sol)
colnames(sol) = c("A1", colnames(eqtns[,-ncol(eqtns)]))
fx = createFunctions(sol)
yEval = evaluateX(data, fx, xEval)
print(yEval)
}
createEquation <- function(data, n)
{
eqtns = matrix(0, nrow = (3 * n), ncol = (3 * n) + 1)
var <- paste0(rep(c("A", "B", "C"), n), rep(1:n, each = 3))
colnames(eqtns) <- c(var, "RHS")
mat_ptr = 2
col_ptr = 1
for (i in 2:n)
{
b = data[i,1]
a = b ^ 2
y = data[i,2]
eqtns[mat_ptr, col_ptr:(col_ptr + 2)] = c(a, b, 1)
eqtns[mat_ptr, (3 * n) + 1] = y
col_ptr = col_ptr + 3
eqtns[mat_ptr + 1, col_ptr:(col_ptr + 2)] = c(a, b, 1)
eqtns[mat_ptr + 1, (3 * n) + 1] = y
mat_ptr = mat_ptr + 2
}
b = data[c(1, n + 1), 1]
y = y = data[c(1, n + 1), 2]
a = b ^ 2
eqtns[mat_ptr, 1:3] = c(a[1], b[1], 1)
eqtns[mat_ptr, (3 * n) + 1] = y[1]
eqtns[mat_ptr + 1, (3 * n - 2):(3 * n)] = c(a[2], b[2], 1)
eqtns[mat_ptr + 1, (3 * n) + 1] = y[2]
mat_ptr = mat_ptr + 2
col_ptr = 1
for (i in 2:n)
{
a = 2 * data[i,1]
eqtns[mat_ptr, col_ptr:(col_ptr + 4)] = c(a, 1, 0, -a, -1)
col_ptr = col_ptr + 3
mat_ptr = mat_ptr + 1
}
return (eqtns)
}
createFunctions <- function(sol) {
fx = c()
for (i in seq(from = 1, to = ncol(sol), by = 3))
{
subSol = sol[1,i:(i+2)]
intervFx = paste("function (x) ", paste0("( ", subSol, " * (x ^ ", 2:0, ") )", collapse = " + "))
intervFx = eval(parse(text = intervFx))
fx = c(fx, intervFx)
}
return(fx)
}
evaluateX <- function(data, fx, xEval)
{
for (i in 1:nrow(data))
{
if (xEval <= data[i,1])
{
return(fx[[i - 1]](xEval))
}
}
}
quadraticSpline(data, xEval)
#AXEL O. BALITAAN
#2022-05153
#CMSC 150 - B2L
#Imports former exercise that extracts from the equations and puts them in a matrix
#source("C:/Users/Axel/Desktop/BalitaanEx03_source.R");
#Swap function for partial pivoting
PartialPivoting <- function(mat, pivotRow, i)
{
#Stores original mat row in temp
temp = mat[i,];
#Changes the mat row with pivotRow
mat[i,] = mat[pivotRow,];
#Changes the pivotRow with the orig mat row
mat[pivotRow,] = temp;
#Returns the final mat
return (mat);
}
#Function for Gaussian Method
GaussianMethod <- function(result1)
{
#Extracts the contents of the results from former exercise
mat = result1 $augcoeffmatrix;
variables = result1 $variables;
#Gets how many rows in the matrix
n = nrow(mat);
#
for (i in 1:(n-1))
{
#Gets the index of row with maximum var value
#which.max accepts the rows except the ones that was already iterated through
#Has +(i-1) to compensate to compensate for this (align with the indexing of the main matrix)
pivotRow = which.max(abs(mat[i:n,i])) + (i-1);
#If the value is 0 just returns NA
if (mat[pivotRow, i] == 0)
{
return (NA);
}
#pivots the row and puts it in the current iteration index (Swap)
mat = PartialPivoting(mat, pivotRow, i);
#F
for (j in (i+1):n)
{
#Gets pivot element
pivotElement = mat[i,i];
#Calculates multiplier
multiplier = mat[j,i]/pivotElement;
#Computes the normalized row
normalizedRow = multiplier * mat[i,];
#Subtraction/Elimination and updates the matrix
mat[j,] = mat[j,] - normalizedRow;
}
}
#Initialized an empty vector for the solutions (answers)
sol = c(numeric(length(variables)));
#Backward substitution
for (i in n:1)
{
#Obtains the values of each element
sol[i] = (mat[i,n+1] - sum(mat[i, i:n] * sol[i:n])) / mat[i,i];
}
#Returns list of answers
return (list(variables = variables, augcoeffMatrix = mat, solution = sol));
}
#Function for Gauss Jordan Method
GaussJordanMethod <- function(result1)
{
#Extracts the content of the results from former exercise
mat = result1 $augcoeffmatrix;
variables = result1 $variables;
#Gets how many rows in matrix
n = nrow(mat);
#Iterates through each row
for (i in 1:n)
{
if (i != n)
{
#Gets the index of row with maximum var value
#which.max accepts the rows except the ones that was already iterated through
#Has +(i-1) to compensate to compensate for this (align with the indexing of the main matrix)
pivotRow = which.max(abs(mat[i:n,i])) + (i-1);
#If the element is zero, no unique solution exists
if (mat[pivotRow, i] == 0)
{
print("No unique solutions exist.")
return (0);
}
#Performs partial pivoting
mat = PartialPivoting(mat, pivotRow, i);
}
#Divides row i by its pivot element
mat[i,] = mat[i,] / mat[i,i];
for (j in 1:n)
{
#Skips row i
if (i==j)
{
next;
}
#Multiplies row i by the element in row j and column i
normalizedRow = mat[j,i] * mat[i,]
#Subtracts the normalized row to the row (eliminates other elements except the 1 in diagonal)
mat[j,] = mat[j,] - normalizedRow;
}
}
#Returns a list of the answers
return (list(variables = variables, augcoeffMatrix = mat, solution = as.vector(mat[,ncol(mat)])));
}
# AXEL O. BALITAAN
# 2022 - 05153
# Regression program that gets regression coefficients, equation (string), equation (parsed), added a function for graphing
source("gaussMethods.R")
# Gets the RHS values for the augcoeffmatrix
getRHS <- function(xVal, yVal, j)
{
return (sum((xVal ^ (j-1)) * yVal)); # returns RHS value
}
# Gets the augcoeffmatrix
getMatrix <- function(deg, xVal, yVal)
{
augcoeffmatrix = matrix(c(0), nrow = deg + 1, ncol = deg + 2); # Creates an empty matrix of the corresponding size
tempRowValues = c(); # Starts with an empty vector
for (i in 1:(2 * deg + 1)) # Fills the vector with all the values that will be needed
{
val = sum(xVal ^ (i-1))
tempRowValues = c(tempRowValues, val)
}
for (j in 1 : (deg + 1)) # Fills the rows of the matrix (splice/iterates starting and ending index of values in the temporary Row vector)
{
augcoeffmatrix[j,] = c(tempRowValues[j : (j + deg)], getRHS(xVal, yVal, j)); # Gets the RHS
}
return (augcoeffmatrix); # Returns the filled augcoeffmatrix
}
# Creates string function
makeString <- function(coefficients)
{
polynomial_string = "function(x) "; # Starts the string
for (i in (0 : (length(coefficients) - 1))) # for every coefficient (starts at 0 for x^0)
{
var = paste (" * x ^", toString(i)); # Initially sets variable to x ^ i
plus = " + "; # By default, has a plus sign
if (i == 0) # If x ^ 0, doesn't need to write it
{
var = "";
}
if (i == (length(coefficients) - 1)) # If last term, doesn't need a plus
{
plus = "";
}
term = paste(toString(coefficients[i+1]), var, plus, sep = "", collapse = NULL); # combines the term ( "c * x ^ i + " )
polynomial_string = paste(polynomial_string, term, sep = "", collapse = NULL); # appends the term to the string
}
return (polynomial_string); # return final string
}
PolynomialRegression <- function(deg, val)
{
xVal = val[[1]]; # Gets the x values vector from the list
yVal = val[[2]]; # Gets the y values vector from the list
n = length(xVal); # Sets number of terms as the number of x values
if (length(xVal) != length(yVal)) # If the number of x values and y values not equal, doesn't proceed
{
print("Number of x and y value not equal.");
return (NA);
}
if ((deg < 0) || (deg >= n)) # If degree, greater than or equal to number of terms, doesn't proceed
{
print("Invalid degree.");
return (NA);
}
augcoeffmatrix = getMatrix(deg, xVal, yVal); # Creates the augcoeffmatrix
holderVars = c(1:(deg + 1)); # ***** Holder variables just for the code from previous exercise to work *****
result1 = list(augcoeffmatrix = augcoeffmatrix, variables = holderVars);
coefficients = GaussianMethod(result1) $solution; # Gets the solution vector using the GaussianMethod of previous exercise
polynomial_string = makeString(coefficients); # Creates the string function polynomial
polynomial_function = eval(parse(text = polynomial_string)); # Creates the parsed function
return (list(augcoeffmatrix = augcoeffmatrix, coefficients = coefficients, polynomial_string = polynomial_string, polynomial_function = polynomial_function));
}
# Graphs the function (plots and use the equation for the line)
graph <- function(given, answers)
{
par(mar = c(6,8,6,6));
plot(given[[1]], given[[2]], pch = 20, col = "red", main = "Amount Paid vs. ROI", xlab = "Amount Paid\n(in thousand)", ylab = "ROI\n(in ten thousand)") # Plots the values
colors = c("blue", "red", "green", "orange", "purple")
for (i in 1:length(answers)) # Adds the lines of each equation(function solution)
{
currFunction = answers[[i]]$polynomial_function;
lines(given[[1]], currFunction(given[[1]]), col = colors[i], lwd = 1);
}
}
#=================================================
# a <- c(20,20,25,27,30,30,33,35,35,40);
# b <- c(8.75,9.43,12.87,14.24,16.89,18.94,25.48,30.11,36.07,51.27);
#
# given = data.frame(a, b);
#
# linearModel = lm(b ~ a, data = given);
# print(linearModel)
#
# quadraticModel = lm(b ~ poly(a, 5, raw=TRUE), data = given);
# print(quadraticModel)
#
#
# deg1 = PolynomialRegression(1, list(a,b));
# deg2 = PolynomialRegression(2, list(a,b));
# deg3 = PolynomialRegression(3, list(a,b));
# deg4 = PolynomialRegression(4, list(a,b));
# deg5 = PolynomialRegression(5, list(a,b));
#
# answers = list(deg1, deg2, deg3, deg4, deg5);
#graph(list(a,b), answers);
#================================================
a <- c(1, 3, 6, 7)
b <- c(10, 20, 19, 33);
PolynomialRegression(3, list(a,b))
library(shiny); runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/modules/module_dietSolver.R')
library(shiny); runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
# AXEL O. BALITAAN
# 2022 - 05153
# Regression program that gets regression coefficients, equation (string), equation (parsed), added a function for graphing
source("Logic/gaussMethods.R")
setwd("C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/Logic")
# AXEL O. BALITAAN
# 2022 - 05153
# Regression program that gets regression coefficients, equation (string), equation (parsed), added a function for graphing
source("Logic/gaussMethods.R")
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
runApp('C:/Users/Axel/Desktop/university/2nd Year/1st Semester/CMSC 150/FinalProject/main.R')
