colnames(transMat) = c(paste0("S", 1:(c_trans - 1)), "SOLUTION")
slackMat = diag(r_trans)
colnames(slackMat) = c(paste0("X", 1:(c_trans - 1)), "Z")
tableu = cbind(transMat[,-c_trans], slackMat, transMat[,c_trans])
r_tableu = nrow(tableu)
c_tableu = ncol(tableu)
for (i in 1:(c_tableu - 2))
{
tableu[r_tableu, i] = -tableu[r_tableu, i]
}
tableu[r_tableu,c_tableu] = 0
return (tableu)
}
simplexMinimize <- function(augcoeffmat)
{
tableu = createTableu(augcoeffmat)
trans = t(tableu)
simplexMaximize (tableu, "min")
}
getBasicSol <- function(tableu, type, final)
{
r_tableu = nrow(tableu)
c_tableu = ncol(tableu)
basicSol = matrix(NA, nrow = 1, ncol = c_tableu - 1)
colnames(basicSol) = colnames(tableu)[-c_tableu]
writeLines("")
if ((final == 1) && (type == "min"))
{
basicSol[1,] = c(tableu[r_tableu,-(c_tableu-1)])
}
else
{
for (i in 1:ncol(basicSol))
{
column = tableu[,i]
basicSol[1,i] = ifelse(((sum(column) == 1) && (max(column) == 1)), tableu[which.max(column),ncol(tableu)], 0)
}
}
print(basicSol)
}
simplexMaximize <- function(tableu, type)
{
lastRow = nrow(tableu)
counter = 0;
while (TRUE)
{
pivotCol = which.min(tableu[lastRow,])
writeLines("")
print(tableu)
writeLines("")
if (tableu[lastRow,pivotCol] >= 0)
{
break
}
getBasicSol(tableu, type, 0)
lastCol = ncol(tableu)
testRatio = ifelse(tableu[,pivotCol] <= 0, NA, tableu[,lastCol]/tableu[,pivotCol])
pivotRow = which.min(testRatio)
pivotE = tableu[pivotRow,pivotCol]
if (pivotE == 0)
{
print("Encountered division by zero!")
return (NULL);
}
nPR = tableu[pivotRow,] / pivotE
for (i in 1:lastRow)
{
if (i == pivotRow)
{
tableu[i,] = nPR
}
else
{
tableu[i,] = tableu[i,] - (nPR * tableu[i,pivotCol])
}
}
}
getBasicSol(tableu, type, 1)
}
simplexMinimize(sample_mat);
sample_mat = matrix(c(2,5,50,1,3,27,16,45,1), nrow = 3, ncol = 3, byrow = TRUE);
createTableu <- function(augcoeffmat)
{
transMat = t(augcoeffmat)
r_trans = nrow(transMat)
c_trans = ncol(transMat)
colnames(transMat) = c(paste0("S", 1:(c_trans - 1)), "SOLUTION")
slackMat = diag(r_trans)
colnames(slackMat) = c(paste0("X", 1:(c_trans - 1)), "Z")
tableu = cbind(transMat[,-c_trans], slackMat, transMat[,c_trans])
r_tableu = nrow(tableu)
c_tableu = ncol(tableu)
for (i in 1:(c_tableu - 2))
{
tableu[r_tableu, i] = -tableu[r_tableu, i]
}
tableu[r_tableu,c_tableu] = 0
return (tableu)
}
simplexMinimize <- function(augcoeffmat)
{
tableu = createTableu(augcoeffmat)
trans = t(tableu)
simplexMaximize (tableu, "min")
}
getBasicSol <- function(tableu, type, final)
{
r_tableu = nrow(tableu)
c_tableu = ncol(tableu)
basicSol = matrix(NA, nrow = 1, ncol = c_tableu - 1)
colnames(basicSol) = colnames(tableu)[-c_tableu]
writeLines("")
if ((final == 1) && (type == "min"))
{
basicSol[1,] = c(tableu[r_tableu,-(c_tableu-1)])
}
else
{
for (i in 1:ncol(basicSol))
{
column = tableu[,i]
basicSol[1,i] = ifelse(((sum(column) == 1) && (max(column) == 1)), tableu[which.max(column),ncol(tableu)], 0)
}
}
print(basicSol)
}
simplexMaximize <- function(tableu, type)
{
lastRow = nrow(tableu)
counter = 0;
while (TRUE)
{
pivotCol = which.min(tableu[lastRow,])
writeLines("")
print(tableu)
writeLines("")
if (tableu[lastRow,pivotCol] >= 0)
{
break
}
getBasicSol(tableu, type, 0)
lastCol = ncol(tableu)
testRatio = ifelse(tableu[,pivotCol] <= 0, NA, tableu[,lastCol]/tableu[,pivotCol])
pivotRow = which.min(testRatio)
pivotE = tableu[pivotRow,pivotCol]
if (pivotE == 0)
{
print("Encountered division by zero!")
return (NULL);
}
nPR = tableu[pivotRow,] / pivotE
for (i in 1:lastRow)
{
if (i == pivotRow)
{
tableu[i,] = nPR
}
else
{
tableu[i,] = tableu[i,] - (nPR * tableu[i,pivotCol])
}
}
}
getBasicSol(tableu, type, 1)
}
simplexMinimize(sample_mat);
sample_mat = matrix(c(2,5,50,1,3,27,16,45,1), nrow = 3, ncol = 3, byrow = TRUE);
createTableu <- function(augcoeffmat)
{
transMat = t(augcoeffmat)
r_trans = nrow(transMat)
c_trans = ncol(transMat)
colnames(transMat) = c(paste0("S", 1:(c_trans - 1)), "SOLUTION")
slackMat = diag(r_trans)
colnames(slackMat) = c(paste0("X", 1:(c_trans - 1)), "Z")
tableu = cbind(transMat[,-c_trans], slackMat, transMat[,c_trans])
r_tableu = nrow(tableu)
c_tableu = ncol(tableu)
for (i in 1:(c_tableu - 2))
{
tableu[r_tableu, i] = -tableu[r_tableu, i]
}
tableu[r_tableu,c_tableu] = 0
return (tableu)
}
simplexMinimize <- function(augcoeffmat)
{
tableu = createTableu(augcoeffmat)
trans = t(tableu)
simplexMaximize (tableu, "min")
}
getBasicSol <- function(tableu, type, final)
{
r_tableu = nrow(tableu)
c_tableu = ncol(tableu)
basicSol = matrix(NA, nrow = 1, ncol = c_tableu - 1)
colnames(basicSol) = colnames(tableu)[-c_tableu]
writeLines("")
if ((final == 1) && (type == "min"))
{
basicSol[1,] = c(tableu[r_tableu,-(c_tableu-1)])
}
else
{
for (i in 1:ncol(basicSol))
{
column = tableu[,i]
basicSol[1,i] = ifelse(((sum(column) == 1) && (max(column) == 1)), tableu[which.max(column),ncol(tableu)], 0)
}
}
print(basicSol)
}
simplexMaximize <- function(tableu, type)
{
lastRow = nrow(tableu)
counter = 0;
while (TRUE)
{
pivotCol = which.min(tableu[lastRow,])
writeLines("")
print(tableu)
writeLines("")
if (tableu[lastRow,pivotCol] >= 0)
{
break
}
getBasicSol(tableu, type, 0)
lastCol = ncol(tableu)
testRatio = ifelse(tableu[,pivotCol] <= 0, NA, tableu[,lastCol]/tableu[,pivotCol])
pivotRow = which.min(testRatio)
pivotE = tableu[pivotRow,pivotCol]
if ((pivotE == 0) || (isNA(pivotE)))
{
print("Encountered division by zero!")
return (NULL);
}
nPR = tableu[pivotRow,] / pivotE
for (i in 1:lastRow)
{
if (i == pivotRow)
{
tableu[i,] = nPR
}
else
{
tableu[i,] = tableu[i,] - (nPR * tableu[i,pivotCol])
}
}
}
getBasicSol(tableu, type, 1)
}
simplexMinimize(sample_mat);
sample_mat = matrix(c(2,5,50,1,3,27,16,45,1), nrow = 3, ncol = 3, byrow = TRUE);
createTableu <- function(augcoeffmat)
{
transMat = t(augcoeffmat)
r_trans = nrow(transMat)
c_trans = ncol(transMat)
colnames(transMat) = c(paste0("S", 1:(c_trans - 1)), "SOLUTION")
slackMat = diag(r_trans)
colnames(slackMat) = c(paste0("X", 1:(c_trans - 1)), "Z")
tableu = cbind(transMat[,-c_trans], slackMat, transMat[,c_trans])
r_tableu = nrow(tableu)
c_tableu = ncol(tableu)
for (i in 1:(c_tableu - 2))
{
tableu[r_tableu, i] = -tableu[r_tableu, i]
}
tableu[r_tableu,c_tableu] = 0
return (tableu)
}
simplexMinimize <- function(augcoeffmat)
{
tableu = createTableu(augcoeffmat)
trans = t(tableu)
simplexMaximize (tableu, "min")
}
getBasicSol <- function(tableu, type, final)
{
r_tableu = nrow(tableu)
c_tableu = ncol(tableu)
basicSol = matrix(NA, nrow = 1, ncol = c_tableu - 1)
colnames(basicSol) = colnames(tableu)[-c_tableu]
writeLines("")
if ((final == 1) && (type == "min"))
{
basicSol[1,] = c(tableu[r_tableu,-(c_tableu-1)])
}
else
{
for (i in 1:ncol(basicSol))
{
column = tableu[,i]
basicSol[1,i] = ifelse(((sum(column) == 1) && (max(column) == 1)), tableu[which.max(column),ncol(tableu)], 0)
}
}
print(basicSol)
}
simplexMaximize <- function(tableu, type)
{
lastRow = nrow(tableu)
counter = 0;
while (TRUE)
{
pivotCol = which.min(tableu[lastRow,])
writeLines("")
print(tableu)
writeLines("")
if (tableu[lastRow,pivotCol] >= 0)
{
break
}
getBasicSol(tableu, type, 0)
lastCol = ncol(tableu)
testRatio = ifelse(tableu[,pivotCol] <= 0, NA, tableu[,lastCol]/tableu[,pivotCol])
pivotRow = which.min(testRatio)
pivotE = tableu[pivotRow,pivotCol]
if ((pivotE == 0) || (is.nA(pivotE)))
{
print("Encountered division by zero!")
return (NULL);
}
nPR = tableu[pivotRow,] / pivotE
for (i in 1:lastRow)
{
if (i == pivotRow)
{
tableu[i,] = nPR
}
else
{
tableu[i,] = tableu[i,] - (nPR * tableu[i,pivotCol])
}
}
}
getBasicSol(tableu, type, 1)
}
simplexMinimize(sample_mat);
sample_mat = matrix(c(2,5,50,1,3,27,16,45,1), nrow = 3, ncol = 3, byrow = TRUE);
createTableu <- function(augcoeffmat)
{
transMat = t(augcoeffmat)
r_trans = nrow(transMat)
c_trans = ncol(transMat)
colnames(transMat) = c(paste0("S", 1:(c_trans - 1)), "SOLUTION")
slackMat = diag(r_trans)
colnames(slackMat) = c(paste0("X", 1:(c_trans - 1)), "Z")
tableu = cbind(transMat[,-c_trans], slackMat, transMat[,c_trans])
r_tableu = nrow(tableu)
c_tableu = ncol(tableu)
for (i in 1:(c_tableu - 2))
{
tableu[r_tableu, i] = -tableu[r_tableu, i]
}
tableu[r_tableu,c_tableu] = 0
return (tableu)
}
simplexMinimize <- function(augcoeffmat)
{
tableu = createTableu(augcoeffmat)
trans = t(tableu)
simplexMaximize (tableu, "min")
}
getBasicSol <- function(tableu, type, final)
{
r_tableu = nrow(tableu)
c_tableu = ncol(tableu)
basicSol = matrix(NA, nrow = 1, ncol = c_tableu - 1)
colnames(basicSol) = colnames(tableu)[-c_tableu]
writeLines("")
if ((final == 1) && (type == "min"))
{
basicSol[1,] = c(tableu[r_tableu,-(c_tableu-1)])
}
else
{
for (i in 1:ncol(basicSol))
{
column = tableu[,i]
basicSol[1,i] = ifelse(((sum(column) == 1) && (max(column) == 1)), tableu[which.max(column),ncol(tableu)], 0)
}
}
print(basicSol)
}
simplexMaximize <- function(tableu, type)
{
lastRow = nrow(tableu)
counter = 0;
while (TRUE)
{
pivotCol = which.min(tableu[lastRow,])
writeLines("")
print(tableu)
writeLines("")
if (tableu[lastRow,pivotCol] >= 0)
{
break
}
getBasicSol(tableu, type, 0)
lastCol = ncol(tableu)
testRatio = ifelse(tableu[,pivotCol] <= 0, NA, tableu[,lastCol]/tableu[,pivotCol])
pivotRow = which.min(testRatio)
pivotE = tableu[pivotRow,pivotCol]
if ((pivotE == 0) || (is.na(pivotE)))
{
print("Encountered division by zero!")
return (NULL);
}
nPR = tableu[pivotRow,] / pivotE
for (i in 1:lastRow)
{
if (i == pivotRow)
{
tableu[i,] = nPR
}
else
{
tableu[i,] = tableu[i,] - (nPR * tableu[i,pivotCol])
}
}
}
getBasicSol(tableu, type, 1)
}
simplexMinimize(sample_mat);
library(shiny); runApp('main.R')
runApp('main.R')
sample_mat = matrix(c(2,5,50,1,3,27,16,45,1), nrow = 3, ncol = 3, byrow = TRUE);
createTableu <- function(augcoeffmat)
{
transMat = t(augcoeffmat)
r_trans = nrow(transMat)
c_trans = ncol(transMat)
colnames(transMat) = c(paste0("S", 1:(c_trans - 1)), "SOLUTION")
slackMat = diag(r_trans)
colnames(slackMat) = c(paste0("X", 1:(c_trans - 1)), "Z")
tableu = cbind(transMat[,-c_trans], slackMat, transMat[,c_trans])
r_tableu = nrow(tableu)
c_tableu = ncol(tableu)
for (i in 1:(c_tableu - 2))
{
tableu[r_tableu, i] = -tableu[r_tableu, i]
}
tableu[r_tableu,c_tableu] = 0
return (tableu)
}
simplexMinimize <- function(augcoeffmat)
{
tableu = createTableu(augcoeffmat)
trans = t(tableu)
simplexMaximize (tableu, "min")
}
getBasicSol <- function(tableu, type, final)
{
r_tableu = nrow(tableu)
c_tableu = ncol(tableu)
basicSol = matrix(NA, nrow = 1, ncol = c_tableu - 1)
colnames(basicSol) = colnames(tableu)[-c_tableu]
writeLines("")
if ((final == 1) && (type == "min"))
{
basicSol[1,] = c(tableu[r_tableu,-(c_tableu-1)])
}
else
{
for (i in 1:ncol(basicSol))
{
column = tableu[,i]
basicSol[1,i] = ifelse(((sum(column) == 1) && (max(column) == 1)), tableu[which.max(column),ncol(tableu)], 0)
}
}
print(basicSol)
}
simplexMaximize <- function(tableu, type)
{
lastRow = nrow(tableu)
counter = 0;
while (TRUE)
{
pivotCol = which.min(tableu[lastRow,])
writeLines("")
print(tableu)
writeLines("")
if (tableu[lastRow,pivotCol] >= 0)
{
break
}
getBasicSol(tableu, type, 0)
lastCol = ncol(tableu)
testRatio = ifelse(tableu[,pivotCol] <= 0, NA, tableu[,lastCol]/tableu[,pivotCol])
pivotRow = which.min(testRatio)
pivotE = tableu[pivotRow,pivotCol]
if ((pivotE == 0) || (is.na(pivotE)))
{
print("Encountered division by zero!")
return (NULL);
}
nPR = tableu[pivotRow,] / pivotE
for (i in 1:lastRow)
{
if (i == pivotRow)
{
tableu[i,] = nPR
}
else
{
tableu[i,] = tableu[i,] - (nPR * tableu[i,pivotCol])
}
}
}
getBasicSol(tableu, type, 1)
}
simplexMinimize(sample_mat);
